############################################
#
# Loading/Unloading part FROM/TO EXTRUDER TO/FROM NOZZLE
# During loading, if the IR sensor does not detect the filament, it tries 3 times to reinsert it
#
############################################

[gcode_macro MMU_CHECK_LOAD_FILAMENT_IN_EXTRUDER]
description: VERIFY if filament is correctly loaded
variable_filament_in: 0
gcode:
    {% if printer["gcode_macro MMU_CHECK_LOAD_FILAMENT_IN_EXTRUDER"].filament_in|int == 0 %}
        {% if printer["filament_switch_sensor ir_sensor"].filament_detected == true %}
			{% if printer["gcode_macro _VAR_MMU2S"].enable_led|int == 1 %}
			    LEDFILOK
			{% endif %}
            M118 Check if filament is loaded
            SYNC_STEPPER_TO_EXTRUDER STEPPER=gear_stepper EXTRUDER=extruder
            G91
            G92 E0
            G1 E10 F600
            G1 E-{printer["gcode_macro _VAR_MMU2S"].load_in_extruder - 10} F600
            G92 E0
            G90
            SYNC_STEPPER_TO_EXTRUDER STEPPER=gear_stepper EXTRUDER=
            G4 P1000
        {% endif %}
		{% if printer["gcode_macro _VAR_MMU2S"].enable_led|int == 1 %}
    		LEDFILNOK
		{% endif %}
        MMU_RETRY_LOAD_FILAMENT_IN_EXTRUDER
    {% endif %}

# Try to reinsert the filament into the extruder
# Called when the IR sensor does not detect the filament
# the MMU2S push the filament of 10mm
# and the extruder gear try to insert it into the nozzle
[gcode_macro MMU_RETRY_LOAD_FILAMENT_IN_EXTRUDER]
description: Retry inserting Filament into extruder
gcode:
    {% if printer["filament_switch_sensor ir_sensor"].filament_detected == false %}
        M118 Retry loading ....
        {% if printer["gcode_macro MMU_PAUSE"].is_paused|int == 0 %}
            {% if printer.extruder.temperature > printer["gcode_macro _VAR_MMU2S"].min_temp_extruder %}
                M118 Loading Filament...
                _MMU_ERROR_INCREMENT_LOAD
                G90
                SYNC_STEPPER_TO_EXTRUDER STEPPER=gear_stepper EXTRUDER=extruder
                G91
                G92 E0
                G1 E{printer["gcode_macro _VAR_MMU2S"].load_in_extruder} F600
                G92 E0
                G90
                SYNC_STEPPER_TO_EXTRUDER STEPPER=gear_stepper EXTRUDER=
            {% endif %}
        {% endif %}
        G4 P1000
    {% else %}
        M118 Filament in extruder : OK
        SYNC_STEPPER_TO_EXTRUDER STEPPER=gear_stepper EXTRUDER=extruder
        G91
        G92 E0
        SET_GCODE_VARIABLE MACRO=MMU_CHECK_LOAD_FILAMENT_IN_EXTRUDER VARIABLE=filament_in VALUE=1
        G1 E{printer["gcode_macro _VAR_MMU2S"].load_in_extruder - 10} F600
        G92 E0
    	G90   
        SYNC_STEPPER_TO_EXTRUDER STEPPER=gear_stepper EXTRUDER=
    {% endif %}

# Load the filament into the extruder
# the MMU2S push the filament of 20mm
# and the extruder gear try to insert it into the nozzle
# if the filament is not detected by the IR, call MMU_RETRY_LOAD_FILAMENT_IN_EXTRUDER 3 times
#
# Call MMU_PAUSE if the filament is not detected by the IR sensor
[gcode_macro MMU_LOAD_FILAMENT_INTO_NOZZLE]
description: Load Filament into the Nozzle
gcode:
    {% if printer["gcode_macro MMU_PAUSE"].is_paused|int == 0 %}
        {% if printer.extruder.temperature > printer["gcode_macro _VAR_MMU2S"].min_temp_extruder %}
            M118 Loading Filament...
            # move idler out of way
            # MANUAL_STEPPER STEPPER=idler_stepper MOVE={printer["gcode_macro _VAR_MMU2S"].idler_home_position}
            SET_GCODE_VARIABLE MACRO=MMU_CHECK_LOAD_FILAMENT_IN_EXTRUDER VARIABLE=filament_in VALUE=0
            SYNC_STEPPER_TO_EXTRUDER STEPPER=gear_stepper EXTRUDER=extruder
            G91
            G92 E0
            G1 E{printer["gcode_macro _VAR_MMU2S"].load_in_extruder} F600
            G92 E0
            G90
            SYNC_STEPPER_TO_EXTRUDER STEPPER=gear_stepper EXTRUDER=
            G4 P1000
            MMU_CHECK_LOAD_FILAMENT_IN_EXTRUDER
            MMU_CHECK_LOAD_FILAMENT_IN_EXTRUDER
            MMU_CHECK_LOAD_FILAMENT_IN_EXTRUDER
            MMU_IS_FILAMENT_IN_EXTRUDER
            MMU_UNSELECT_TOOL
            # PURGE_FILAMENT
            M118 Load Complete
        {% else %}
            M118 Extruder too cold
            MMU_PAUSE
        {% endif %}
    {% endif %}

[gcode_macro MMU_RETRY_UNLOAD_FILAMENT_IN_EXTRUDER]
description: Retry unload, try correct misalignement of bondtech gear
gcode:
    {% if printer["filament_switch_sensor ir_sensor"].filament_detected == true %}
        M118 Retry unloading extruder....
        {% if printer["gcode_macro MMU_PAUSE"].is_paused|int == 0 %}
            {% if printer.extruder.temperature > printer["gcode_macro _VAR_MMU2S"].min_temp_extruder %}
                M118 Unloading Filament extruder ...
                _MMU_ERROR_INCREMENT_UNLOAD
                SYNC_STEPPER_TO_EXTRUDER STEPPER=gear_stepper EXTRUDER=extruder
                G91
                G92 E0
                G1 E10 F600
                G1 E-{printer["gcode_macro _VAR_MMU2S"].unload_in_extruder1} F600
                G1 E-{printer["gcode_macro _VAR_MMU2S"].unload_in_extruder2} F3000
                G92 E0
                G90
                SYNC_STEPPER_TO_EXTRUDER STEPPER=gear_stepper EXTRUDER=
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro _MMU_FORM_TIP]
description: Generic tip forming macro
gcode:
    {% set COOLING_TUBE_LENGTH = params.COOLING_TUBE_LENGTH|default(10) %} # Dragon ST: 15, Dragon HF: 10, Mosquito: 20
    {% set COOLING_TUBE_RETRACTION = params.COOLING_TUBE_RETRACTION|default(30) %} # Dragon ST: 35, Dragon HF: 30, Mosquito: 38
    {% set INITIAL_COOLING_SPEED = params.INITIAL_COOLING_SPEED|default(10) %}
    {% set FINAL_COOLING_SPEED = params.FINAL_COOLING_SPEED|default(50) %}
    {% set COOLING_MOVES = params.COOLING_MOVES|default(5) %}
    {% set TOOLCHANGE_TEMP = params.TOOLCHANGE_TEMP|default(0) %}
    {% set USE_SKINNYDIP = params.USE_SKINNYDIP|default(1) %}
    {% set USE_FAST_SKINNYDIP = params.USE_FAST_SKINNYDIP|default(1) %}
    {% set SKINNYDIP_DISTANCE = params.SKINNYDIP_DISTANCE|default(26) %}
    {% set DIP_INSERTION_SPEED = params.DIP_INSERTION_SPEED|default(33) %}
    {% set DIP_EXTRACTION_SPEED = params.DIP_EXTRACTION_SPEED|default(70) %}
    {% set MELT_ZONE_PAUSE = params.MELT_ZONE_PAUSE|default(250) %}
    {% set COOLING_ZONE_PAUSE = params.COOLING_ZONE_PAUSE|default(250) %}
    {% set UNLOADING_SPEED_START = params.UNLOADING_SPEED_START|default(199) %}
    {% set UNLOADING_SPEED = params.UNLOADING_SPEED|default(20) %}
    {% set RAMMING_VOLUME = params.RAMMING_VOLUME|default(0) %} # in mm3
    {% set INITIAL_RETRACT = params.INITIAL_RETRACT|default(0) %} # Use an initial retract or not. Don't use it if you want to ram the filament
    {% set FINAL_EJECT = params.FINAL_EJECT|default(0) %} # Fully eject the filament afterwards, default is no

    G91
    G92 E0

    SET_PRESSURE_ADVANCE ADVANCE=0
    {% set OLD_TEMP = printer.extruder.target %}

    # Ramming with SuperSlicer standard setting
    {% if INITIAL_RETRACT|int == 1 %}
        G1 E-8.5000 F3000
    {% endif %}

    {% set RATIO = (RAMMING_VOLUME|float) /23.0 %}

    G1 E{0.5784 * RATIO|float} F299 #7
    G1 E{0.5834 * RATIO|float} F302 #3
    G1 E{0.5918 * RATIO|float} F306 #6
    G1 E{0.6169 * RATIO|float} F319 #6
    G1 E{0.3393 * RATIO|float} F350 #0
    G1 E{0.3363 * RATIO|float} F350 #0
    G1 E{0.7577 * RATIO|float} F392 #6
    G1 E{0.8382 * RATIO|float} F434 #3
    G1 E{0.7776 * RATIO|float} F469 #9
    G1 E{0.1293 * RATIO|float} F469 #9
    G1 E{0.9673 * RATIO|float} F501 #2
    G1 E{1.0176 * RATIO|float} F527 #2
    G1 E{0.5956 * RATIO|float} F544 #6
    G1 E{0.4555 * RATIO|float} F544 #6
    G1 E{1.0662 * RATIO|float} F552 #4

    # set toolchange temperature just prior to filament being extracted from melt zone and wait for set point
    # (SKINNYDIP--normal mode only)
    {% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 0 %}
       M109 S{TOOLCHANGE_TEMP}
    {% endif %}

    # Retraction
    {% set TOTAL_RETRACTION_DISTANCE = COOLING_TUBE_RETRACTION|float + COOLING_TUBE_LENGTH|float / 2 - 15 %}
    G1 E-15 F{1.0 * UNLOADING_SPEED_START|float * 60}
    G1 E-{0.7 * TOTAL_RETRACTION_DISTANCE} F{1.0 * UNLOADING_SPEED|float * 60}
    G1 E-{0.2 * TOTAL_RETRACTION_DISTANCE} F{0.5 * UNLOADING_SPEED|float * 60}
    G1 E-{0.1 * TOTAL_RETRACTION_DISTANCE} F{0.3 * UNLOADING_SPEED|float * 60}

    {% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 1 %}
       M104 S{TOOLCHANGE_TEMP}
    {% endif %}

    # Generate Cooling Moves
    {% set SPEED_INC = (FINAL_COOLING_SPEED|float - INITIAL_COOLING_SPEED|float) / (2 * COOLING_MOVES|float - 1) %}
    {% for move in range(COOLING_MOVES|int) %}
      G1 E{COOLING_TUBE_LENGTH} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*move*2) * 60}
      G1 E-{COOLING_TUBE_LENGTH} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*(move*2+1)) * 60}
    {% endfor %}

    # wait for extruder to reach toolchange temperature after cooling moves complete (SKINNYDIP--fast mode only)
    {% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 1 %}
        M109 S{TOOLCHANGE_TEMP}
    {% endif %}

    # Generate a skinnydip move
    {% if USE_SKINNYDIP|int == 1 %}
      G1 E{SKINNYDIP_DISTANCE} F{DIP_INSERTION_SPEED|float * 60}
      G4 P{MELT_ZONE_PAUSE}
      G1 E-{SKINNYDIP_DISTANCE} F{DIP_EXTRACTION_SPEED|float * 60}
      G4 P{COOLING_ZONE_PAUSE}
    {% endif %}

    {% if TOOLCHANGE_TEMP|float > 0 %}
      M104 S{OLD_TEMP}
    {% endif %}

    {% if FINAL_EJECT|int == 1 %}
        G92 E0
        G1 E-80 F3000
    {% endif %}

    G92 E0

# Unload the filament from the nozzle
# Retract the filament from the nozzle to the out of the extruder gear
#
# Call MMU_PAUSE if the IR sensor detects the filament after the ejection
[gcode_macro MMU_UNLOAD_FILAMENT_IN_EXTRUDER]
description: Unload the filament from the nozzle (without RAMMING !!!)
gcode:
    {% if printer["gcode_macro MMU_PAUSE"].is_paused|int == 0 %}
        {% if printer.extruder.temperature > printer["gcode_macro _VAR_MMU2S"].min_temp_extruder %}
            {% if printer["gcode_macro MMU_SELECT_TOOL"].tool_selected|int == -1 %}
                M118 Forming tip
                _MMU_FORM_TIP
                M118 Unloading Filament...
                #UNLOAD_FILAMENT
                G91
                G1 E-{printer["gcode_macro _VAR_MMU2S"].unload_in_extruder1} F600
                G1 E-{printer["gcode_macro _VAR_MMU2S"].unload_in_extruder2} F3000
                G90
                G92 E0
                G4 P1000
                MMU_RETRY_UNLOAD_FILAMENT_IN_EXTRUDER
                MMU_RETRY_UNLOAD_FILAMENT_IN_EXTRUDER
                MMU_RETRY_UNLOAD_FILAMENT_IN_EXTRUDER
                _MMU_IS_FILAMENT_STUCK_IN_EXTRUDER
                M118 Filament removed
            {% else %}
                M118 Tool selected, UNSELECT it
                MMU_PAUSE
            {% endif %}
        {% else %}
            M118 Extruder too cold
            MMU_PAUSE
        {% endif %}
    {% endif %}

############################################
#
# Endstop check MACROS
# Verify the state of the FINDA or the IR sensor
#
############################################

[gcode_macro MMU_IS_FILAMENT_IN_EXTRUDER]
description: Call MMU_PAUSE if the filament is not detected by the IR sensor
gcode:
    {% if printer["filament_switch_sensor ir_sensor"].filament_detected == true %}
        M118 Filament in extruder
        {% if printer["gcode_macro _VAR_MMU2S"].enable_led|int == 1 %}
	        SET_LED LED=my_neopixel RED=0.0 GREEN=0.5 BLUE=0.0 INDEX=7 TRANSMIT=1
        {% endif %}
    {% else %}
        M118 Filament not in extruder
        MMU_PAUSE
    {% endif %}

[gcode_macro MMU_IS_FILAMENT_IN_FINDA]
description: Call MMU_PAUSE if the filament is not detected by the FINDA
gcode:
    {% if printer["filament_switch_sensor finda"].filament_detected == true %}
        M118 Filament in finda
    {% else %}
        M118 Filament not in finda
        {% if printer["gcode_macro _VAR_MMU2S"].enable_led|int == 1 %}
	        SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.0 INDEX=7 TRANSMIT=1
        {% endif %}
        MMU_PAUSE
    {% endif %}


# Call MMU_PAUSE if the filament is detected by the IR sensor
[gcode_macro _MMU_IS_FILAMENT_STUCK_IN_EXTRUDER]
gcode:
    {% if printer["filament_switch_sensor ir_sensor"].filament_detected == true %}
        M118 Filament stuck in extruder
        MMU_PAUSE
    {% else %}
        M118 Filament not in extruder
    {% endif %}

# Call MMU_PAUSE if the filament is detected by the FINDA
[gcode_macro _IS_FILAMENT_STUCK_IN_FINDA]
gcode:
     {% if printer["filament_switch_sensor finda"].filament_detected == true %}
        M118 Filament stuck in FINDA
        {% if printer["gcode_macro _VAR_MMU2S"].enable_led|int == 1 %}
	    SET_LED LED=my_neopixel RED=1.0 GREEN=0.49 BLUE=0 INDEX=7 TRANSMIT=1
        {% endif %}
        MMU_PAUSE
    {% else %}
        {% if printer["gcode_macro _VAR_MMU2S"].enable_led|int == 1 %}
	    SET_LED LED=my_neopixel RED=0.5 GREEN=0.0 BLUE=0.0 INDEX=7 TRANSMIT=1
        {% endif %}
        M118 Filament not in FINDA
    {% endif %}
